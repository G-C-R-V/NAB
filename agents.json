{
  "version": "1.0",
  "agents": [
    {
      "name": "LaravelMVP_Builder",
      "role": "full-stack generator",
      "goals": [
        "Generar un MVP producción-ready de turnos de peluquería + tienda de postres",
        "Producir 3 variantes del proyecto (en ramas separadas) manteniendo el mismo alcance",
        "Dejar migraciones, seeders, tests mínimos y README listos",
        "Integrar Mercado Pago (sandbox), mail SMTP y WhatsApp (link prellenado)",
        "Proveer Dockerfile y docker-compose opcional"
      ],
      "constraints": [
        "Laravel 11, PHP 8.2+, MySQL 8/MariaDB",
        "Blade + TailwindCSS + Alpine.js + Heroicons",
        "Auth con Laravel Breeze",
        "Buenas prácticas: Policies por rol, CSRF, validaciones, rate limit",
        "Código legible, comentado y con tests básicos"
      ],
      "output_requirements": [
        "Proyecto compilable y corrible (`php artisan migrate --seed` + `php artisan serve`)",
        "3 ramas: `version/laravel-plain`, `version/laravel-modular`, `version/laravel-service-layer`",
        "README con pasos locales, .env ejemplo, y guía de deploy barato",
        "Dockerfile y docker-compose.yml funcionales (opcional activable)"
      ],
      "instructions": [
        "Usá el siguiente PROMPT BASE para todo el alcance. Generá el código completo y dividí en 3 variantes con enfoques internos distintos (plain, modular por dominios, y capa de servicios):",
        "",
        "PROMPT BASE:",
        "Quiero que generes un MVP producción-ready con este alcance:",
        "",
        "Objetivo",
        "Plataforma web para:",
        "- Pedir turnos de peluquería (agenda, servicios, barberos, disponibilidad, recordatorios).",
        "- Vender postres/comida en una sección separada, con opción de seña (%) para reservar encargos, políticas de cancelación y fecha estimada de entrega.",
        "Tomar como referencia funcional a AgendaPro (agenda online de servicios), pero sin copiar diseño ni texto.",
        "",
        "Stack técnico (preferencia)",
        "- Backend: Laravel 11 (PHP 8.2+), MySQL 8 (compatible MariaDB), Eloquent, Policies.",
        "- Frontend: Blade + TailwindCSS; Alpine.js para interacciones; íconos Heroicons.",
        "- Auth: Laravel Breeze (email/password).",
        "- Pagos (AR): Mercado Pago Checkout Pro (sandbox + producción).",
        "- Mail: SMTP (usar .env).",
        "- Mensajería: Link directo a WhatsApp con mensaje prellenado (sin API paga).",
        "- Deploy: Dockerfile + docker-compose opcional.",
        "Si algo no existe, mockeá con seeds y deja interfaces limpias para reemplazar.",
        "",
        "Roles",
        "- Admin: configura negocio, servicios, staff, horarios, feriados, políticas, catálogo de postres, ve reportes.",
        "- Staff (barbero): ve su agenda, bloquea huecos, confirma/cancela turnos.",
        "- Cliente: reserva turno, compra postres, paga seña, ve estado.",
        "",
        "Módulo Turnos (Peluquería)",
        "Entidades:",
        "users(id, name, email, role)",
        "services(id, name, duration_minutes, price, active)",
        "staff(id, user_id, display_name, bio, active)",
        "staff_services(staff_id, service_id)",
        "schedules(id, staff_id, weekday, start_time, end_time) // franja base",
        "exceptions(id, staff_id, date, is_closed, start_time, end_time, note) // feriados,bloqueos",
        "appointments(id, customer_id, staff_id, service_id, start_at, end_at, status ['pending','confirmed','cancelled','no_show','done'], source ['web','admin'], notes)",
        "payments(id, appointment_id nullable, order_id nullable, mp_preference_id, mp_status, amount, is_deposit boolean)",
        "settings(key, value json) // políticas, % seña, ventanas, textos legales",
        "",
        "Lógica:",
        "- Generar slots en base a schedules + duration + buffers configurables.",
        "- Prevenir overbooking (lock transaccional al crear).",
        "- Política de seña configurable (ej.: 30%). Si cancela dentro de <24/48 hs configurables → seña no reembolsable.",
        "- Estados: pending→(pago seña)→confirmed→done | cancelled | no_show.",
        "- Recordatorios por mail automáticos (24h antes).",
        "",
        "UI (cliente):",
        "- Landing con CTA “Reservar turno”.",
        "- Paso 1: Elegir servicio → Paso 2: Elegir barbero (opcional “cualquiera”) → Paso 3: Elegir día/hora (calendar/slots).",
        "- Paso 4: Datos contacto + pagar seña (Mercado Pago).",
        "- Confirmación + mail + botón “Agregar a Google Calendar (link ICS simple)”.",
        "- Botón “Escribir por WhatsApp” con texto: “Hola, tengo una consulta sobre mi turno {id} el {fecha} {hora}”.",
        "",
        "UI (admin/staff):",
        "- Agenda semanal tipo calendario (drag para bloquear huecos).",
        "- Lista de turnos con filtros: fecha, barbero, estado.",
        "- Configuración: horarios, excepciones/feriados, % seña, ventana de cancelación, buffers, textos.",
        "",
        "Módulo Postres (Tienda/Encargos)",
        "Entidades:",
        "products(id, name, slug, description, price, image_url, stock_nullable, is_made_to_order boolean, lead_time_hours int default 48, active)",
        "orders(id, customer_id, total, status ['pending','paid','cancelled','delivered'], delivery_date_estimate datetime, notes)",
        "order_items(id, order_id, product_id, qty, unit_price, subtotal)",
        "payments (reusar tabla; linkear order_id cuando sea compra)",
        "deposits(id, order_id, percent, amount, refundable_until datetime) // calcular según política",
        "cancellations(id, order_id, reason, by_user_id, at)",
        "",
        "Lógica:",
        "- Seña configurable (ej.: 50%) para encargos “a pedido”.",
        "- Calcular fecha estimada de entrega: now + lead_time_hours (o fecha que el cliente elija dentro de una ventana).",
        "- Si el cliente cancela después del límite (24/48 hs previas) → pierde seña.",
        "- Productos con o sin stock: si is_made_to_order=true ignorar stock y usar lead_time.",
        "",
        "UI (cliente):",
        "- Catálogo simple (grid), ficha de producto, “Encargar ahora”.",
        "- Checkout con seña/total vía Mercado Pago.",
        "- Confirmación con fecha estimada clara.",
        "- Link WhatsApp “Consulta mi pedido {order_id}”.",
        "",
        "UI (admin):",
        "- ABM productos, carga de imágenes.",
        "- Órdenes con estados y filtros.",
        "- Reporte de ventas por rango de fecha.",
        "",
        "Pagos (Mercado Pago)",
        "- Crear preferencia con:",
        "  - title dinámico (“Seña turno {id}” o “Pedido {order_id}”)",
        "  - amount (según seña % o total)",
        "  - back_urls + webhook /webhook/mercadopago",
        "- Persistir payment status y cambiar estado (confirmed/paid).",
        "- Entorno sandbox + .env para tokens.",
        "",
        "Seguridad/Calidad",
        "- Validaciones backend y front.",
        "- CSRF, Policies por rol, rate limit en endpoints públicos.",
        "- Tests básicos: creación de slot, reserva sin overbooking, política de seña, cancelación dentro/fuera de ventana.",
        "- Seeders: 2 servicios (Corte, Color), 2 staff (Juan, Meli), 4 productos (postres), 1 admin y 1 cliente demo.",
        "",
        "Endpoints (resumen)",
        "Público:",
        "- GET / → landing",
        "- GET /turnos → selector (servicio/staff/slots)",
        "- POST /turnos → crea reserva (pending)",
        "- POST /turnos/{id}/pago → crea preferencia MP (seña)",
        "- GET /turnos/{id}/confirmacion",
        "- GET /tienda, GET /producto/{slug}",
        "- POST /checkout → order + preferencia MP",
        "- GET /checkout/confirmacion",
        "- POST /webhook/mercadopago",
        "Admin:",
        "- GET /admin → dashboard",
        "- CRUD services, staff, schedules, exceptions, products",
        "- Listado appointments, orders; acciones: confirmar, cancelar, marcar entregado",
        "- Settings (json editor simple)",
        "",
        "UX/UI",
        "- Tailwind minimalista, dark/light.",
        "- Calendario semanal para staff (vista compacta).",
        "- Accesible en mobile, botones grandes, textos claros.",
        "- Mostrar siempre: política de cancelación, % de seña y ventana (24/48h).",
        "",
        "Entregables",
        "- Proyecto Laravel completo.",
        "- Migraciones + Seeders + Factories.",
        "- Vistas Blade listas (landing, turnos, tienda, admin).",
        "- Servicio SlotGenerator (clase separada con tests).",
        "- PaymentsService Mercado Pago.",
        "- README con: Instalación local, variables .env (DB, MP, MAIL), comandos útiles, cómo cambiar % seña y ventana.",
        "- Dockerfile y docker-compose opcional para dev.",
        "",
        "Cómo subirlo barato/gratis (resumen en README)",
        "- DNS/SSL, PlanetScale/Railway para DB, Render/Railway o cPanel, storage link y SMTP.",
        "",
        "FIN PROMPT BASE.",
        "",
        "Flujo de trabajo del agente:",
        "1) Crear repo local y proyecto Laravel.",
        "2) Agregar Breeze, Tailwind, Alpine y Heroicons.",
        "3) Implementar módulos, migraciones, seeders y tests.",
        "4) Integrar Mercado Pago en sandbox (env vars).",
        "5) Generar 3 variantes en ramas diferentes, mantener README común.",
        "6) Validar migraciones/seeders, ejecutar tests.",
        "7) Producir README completo + .env.example + Dockerfile + docker-compose.yml.",
        "8) Entregar comandos de arranque y credenciales demo."
      ],
      "tools": {
        "shell": {
          "allowed": true,
          "bootstrap": [
            "composer create-project laravel/laravel pelu-turnos",
            "cd pelu-turnos && php artisan breeze:install && php artisan migrate",
            "npm install && npm run build"
          ]
        },
        "git": {
          "init_repo": true,
          "branches": [
            "version/laravel-plain",
            "version/laravel-modular",
            "version/laravel-service-layer"
          ]
        }
      },
      "deliverables": [
        "Código fuente completo en 3 ramas",
        "README.md",
        ".env.example",
        "Dockerfile",
        "docker-compose.yml",
        "scripts SQL si aplica",
        "colección HTTP (Insomnia/Postman) para probar endpoints"
      ]
    }
  ]
}
